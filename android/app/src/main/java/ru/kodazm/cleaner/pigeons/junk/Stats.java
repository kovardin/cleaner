// Autogenerated from Pigeon (v1.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.kodazm.cleaner.pigeons.junk;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Stats {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StatsResponse {
    private Long used;
    public Long getUsed() { return used; }
    public void setUsed(Long setterArg) { this.used = setterArg; }

    private Long total;
    public Long getTotal() { return total; }
    public void setTotal(Long setterArg) { this.total = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("used", used);
      toMapResult.put("total", total);
      return toMapResult;
    }
    static StatsResponse fromMap(Map<String, Object> map) {
      StatsResponse fromMapResult = new StatsResponse();
      Object used = map.get("used");
      fromMapResult.used = (used == null) ? null : ((used instanceof Integer) ? (Integer)used : (Long)used);
      Object total = map.get("total");
      fromMapResult.total = (total == null) ? null : ((total instanceof Integer) ? (Integer)total : (Long)total);
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }
  private static class JunkStatsCodec extends StandardMessageCodec {
    public static final JunkStatsCodec INSTANCE = new JunkStatsCodec();
    private JunkStatsCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return StatsResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof StatsResponse) {
        stream.write(128);
        writeValue(stream, ((StatsResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface JunkStats {
    void storage(Result<StatsResponse> result);
    void memory(Result<StatsResponse> result);

    /** The codec used by JunkStats. */
    static MessageCodec<Object> getCodec() {
      return JunkStatsCodec.INSTANCE;
    }

    /** Sets up an instance of `JunkStats` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, JunkStats api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.JunkStats.storage", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.storage(result -> { wrapped.put("result", result); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.JunkStats.memory", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.memory(result -> { wrapped.put("result", result); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
