// Autogenerated from Pigeon (v1.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package ru.kodazm.cleaner.pigeons.junk;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Cleaning {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CleaningRequest {
    private List<String> files;
    public List<String> getFiles() { return files; }
    public void setFiles(List<String> setterArg) { this.files = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("files", files);
      return toMapResult;
    }
    static CleaningRequest fromMap(Map<String, Object> map) {
      CleaningRequest fromMapResult = new CleaningRequest();
      Object files = map.get("files");
      fromMapResult.files = (List<String>)files;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class CleaningResponse {
    private Boolean status;
    public Boolean getStatus() { return status; }
    public void setStatus(Boolean setterArg) { this.status = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("status", status);
      return toMapResult;
    }
    static CleaningResponse fromMap(Map<String, Object> map) {
      CleaningResponse fromMapResult = new CleaningResponse();
      Object status = map.get("status");
      fromMapResult.status = (Boolean)status;
      return fromMapResult;
    }
  }

  public interface Result<T> {
    void success(T result);
  }
  private static class JunkCleaningCodec extends StandardMessageCodec {
    public static final JunkCleaningCodec INSTANCE = new JunkCleaningCodec();
    private JunkCleaningCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return CleaningRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return CleaningResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof CleaningRequest) {
        stream.write(128);
        writeValue(stream, ((CleaningRequest) value).toMap());
      } else 
      if (value instanceof CleaningResponse) {
        stream.write(129);
        writeValue(stream, ((CleaningResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface JunkCleaning {
    void clean(CleaningRequest request, Result<CleaningResponse> result);

    /** The codec used by JunkCleaning. */
    static MessageCodec<Object> getCodec() {
      return JunkCleaningCodec.INSTANCE;
    }

    /** Sets up an instance of `JunkCleaning` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, JunkCleaning api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.JunkCleaning.clean", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              CleaningRequest requestArg = (CleaningRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.clean(requestArg, result -> { wrapped.put("result", result); reply.reply(wrapped); });
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
